:PROPERTIES:
:ID:       79593B60-2A98-42C2-BDFB-BE48296266DB
:END:
#+title: Bool-Vector Type

The printed representation of a bool-vector is like a string, except
that it begins with *#&* followed by the length. The string constant
that follows actually specifies the contents of the bool-vector as a
bitmap---each character in the string contains 8 bits, which specify the
next 8 elements of the bool-vector (1 stands for t, and 0 for nil). The
least significant bits of the character correspond to the lowest indices
in the bool-vector.

#+begin_example
(make-bool-vector 3 t)                  ; #&3"^G"
(make-bool-vector 3 nil)                ; #&3"^@"
#+end_example

These results make sense, because the binary code for 'C-g' is 111 and
'C-@' is the character with code 0.

If the length is not a multiple of 8, the printed representation shows
extra elements, but these extras really make no difference. For
instance, in the next example, the two bool-vectors are equal, because
only the first 3 bits are used:

#+begin_example
(equal #&3"\377" #&3"\007")             ; t
#+end_example


