:PROPERTIES:
:ID:       81942C58-94C3-4345-96C8-72DA30067E73
:END:
#+title: Numeric Data Types

This is not a real defined data type.
It is a set of two numeric data types: [[id:8615D3F0-F0E7-4A7F-9597-BAD9F571CB28][Integer Type]] and [[id:42EB0ED4-9AF9-4918-8A0D-69E52661F390][Floating-Point Type]].

GNU Emacs support two numeric data types: [[id:8615D3F0-F0E7-4A7F-9597-BAD9F571CB28][Integer Type]] and [[id:42EB0ED4-9AF9-4918-8A0D-69E52661F390][Floating-Point Type]].


* Type Predicates for Numbers
:PROPERTIES:
:CUSTOM_ID: sec:type-pred-numb
:END:
- bignump

- fixnump

- floatp

- integerp

- numberp

- natnump

- zerop

natnum stands for natural number.

* Comparison of Numbers
:PROPERTIES:
:CUSTOM_ID: sec:comparison-numbers
:END:
- =(number-or-marker &rest number-or-markers)=
  
  This function tests whether all its arguments are numerically equal,
  and returns =t= if so, =nil= otherwise.

- =(eql value1 value2)=
  
  This function acts like =eq= except when both arguments are numbers.
  It compares numbers by type and numeric value. Floating-point values
  with the same sign, exponent and fraction are =eql=. This differs from
  numeric comparison: =(eql 0.0 -0.0)= returns =nil= and
  =(eql 0.0e+NaN 0.0e+NaN)= returns =t=, whereas === does the opposite.

- =(== number-or-marker1 number-or-marker2)
  
  This function tests whether its arguments are numerically equal, and
  returns =t= if they are not, and =nil= if they are.

- =(< number-or-marker &rest number-or-markers)=
  
  This function tests whether each argument is strictly less than the
  following argument. It returns =t= if so, =nil= otherwise.

- =(<= number-or-marker &rest number-or-markers)=
  
  This function tests whether each argument is less than or equal to the
  following argument. It returns =t= if so, =nil= otherwise.

- =(> number-or-marker &rest number-or-markers)=
  
  This function tests whether each argument is strictly greater than the
  following argument. It returns =t= if so, =nil= otherwise.

- =>= number-or-marker &rest number-or-markers=
  
  This function tests whether each argument is greater than or equal to
  the following argument. It returns =t= if so, =nil= otherwise.

- =(max number-or-marker &rest numbers-or-markers)=
  
  This function returns the largest of its arguments.

- =min number-or-marker &rest numbers-or-markers=
  
  This function returns the smallest of its arguments.

- =(abs number)=
  
  This function returns the absolute value of number.

* Numeric Conversions
:PROPERTIES:
:CUSTOM_ID: sec:numeric-conversions
:END:
- =(float number)=
  
  This returns =number= converted to floating point. If =number= is
  already floating point, =float= returns it unchanged.

- =(truncate number &optional divisor)=
  
  This returns =number=, converted to an integer by rounding towards
  zero.

- =(floor number &optional divisor)=
  
  This returns number, converted to an integer by rounding downward
  (towards negative infinity).

- =(ceiling number &optional divisor)=
  
  This returns =number=, converted to an integer by rounding upward
  (towards positive infinity).

- =(round number &optional divisor)=
  
  This returns =number=, converted to an integer by rounding towards the
  nearest integer.

* Arithmetic Operations
:PROPERTIES:
:CUSTOM_ID: sec:arithm-opera
:END:
- =(1+ number-or-marker)=
  
  This function returns number-or-marker plus 1.

- =(1- numbers-or-markers)=
  
  This function returns number-or-marker minus 1.

- =(+ &rest numbers-or-markers)=
  
  This function adds its arguments together. When given no arguments, +
  returns 0.

- =(- &optional number-or-marker &rest more-numbers-or-markers)=
  
  The =-= function serves two purposes: negation and subtraction. When
  =-= has a single argument, the value is the negative of the argument.
  When there are multiple arguments, =-= subtracts each of the
  =more-numbers-or-markers= from =number-or-marker=, cumulatively. If
  there are no arguments, the result is 0.

- =(* &rest numbers-or-markers)=
  
  This function multiplies its arguments together, and returns the
  product. When given no arguments, =*= returns 1.

- =(/ number &rest divisors)=
  
  With one or more =divisors=, this function divides =number= by each
  divisor in =divisors= in turn, and returns the quotient. With no
  =divisors=, this function returns 1/=number=. Each argument may be a
  number or a marker. If all the arguments are integers, the result is
  an integer, obtained by rounding the quotient towards zero after each
  division.

- =(% dividend divisor)=
  
  This function returns the integer remainder after division of
  =dividend= by =divisor=. The arguments must be integers or markers.

- =(mod dividend divisor)=
  
  This function returns the value of =dividend= modulo =divisor=; in
  other words, the remainder after division of =dividend= by =divisor=,
  but with the same sign as =divisor=. The arguments must be numbers or
  markers.

  Unlike =%=, =mod= permits floating-point arguments; it rounds the
  quotient downward (towards minus infinity) to an integer, and uses
  that quotient to compute the remainder.

* Rounding Operations
:PROPERTIES:
:CUSTOM_ID: sec:rounding-operations
:END:
The functions =ffloor, fceiling, fround=, and =ftruncate= take a
floating-point argument and return a floating-point result whose value
is a nearby integer.

#+begin_src
(floor 1.1)                             ; 1
(ffloor 1.1)                            ; 1.0
#+end_src


* Standard Mathematical Functions
:PROPERTIES:
:CUSTOM_ID: sec:stand-math-funct
:END:
These mathematical functions allow integers as well as floating-point
numbers as arguments.

- =(sin arg)=

- =(cos arg)=

- =(tan arg)=

- =(asin arg)=

- =(acos arg)=

- =(atan y &optional x)=

- =(exp arg)=

- =(log arg &optional base)=

- =(expt x y)=

- =(sqrt arg)=

- =float-e=

- =float-pi=

* Random Numbers
:PROPERTIES:
:CUSTOM_ID: sec:random-numbers
:END:
A deterministic computer program cannot generate true random numbers.
For most purposes, *pseudo-random numbers* suffice. A series of
pseudo-random numbers is generated in a deterministic fashion. The
numbers are not truly random, but they have certain properties that
mimic a random series. For example, all possible values occur equally
often in a pseudo-random series.

Pseudo-random numbers are generated from a *seed* value. Starting from
any given seed, the random function always generates the same sequence
of numbers. By default, Emacs initializes the random seed at startup, in
such a way that the sequence of values of random (with overwhelming
likelihood) differs in each Emacs run.

Sometimes you want the random number sequence to be repeatable. For
example, when debugging a program whose behavior depends on the random
number sequence, it is helpful to get the same behavior in each program
run. To make the sequence repeat, execute =(random "")=. This sets the
seed to a constant value for your particular Emacs executable (though it
may differ for other Emacs builds). You can use other strings to choose
various seed values.

#+begin_src
(random &optional limit)
#+end_src

This function returns a pseudo-random integer. Repeated calls return a
series of pseudo-random integers.

If =limit= is a positive integer, the value is chosen to be nonnegative
and less than =limit=. Otherwise, the value might be any fixnum. If
=limit= is =t=, it means to choose a new seed as if Emacs were
restarting, typically from the system entropy. On systems lacking
entropy pools, choose the seed from less-random volatile data such as
the current time. If =limit= is a string, it means to choose a new seed
based on the string's contents.

