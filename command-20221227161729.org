:PROPERTIES:
:ID:       CC0B56EF-2316-4E73-8264-3D6FF6CA9DAB
:END:
#+title: Command

A command is actually a function in programming language like C or Elisp.
The arguments provided to command are the parameters passed into the corresponding function.


[[id:7F96E391-4CB1-45FB-ABDD-6FE24538F84B][Key Binding]]


* Command Syntax in Linux
#+begin_src shell
  command [option] [argument]
#+end_src

| Name     | Meaning                                           |
|----------+---------------------------------------------------|
| command  | tell what to do                                   |
| option   | information to change the command's behavior      |
| argument | information that tells the command what to act on |

Most commands have one or more options you can add to change the command's behavior.
Options typically consist of a single letter, preceded by a hyphen.
You can group single-letter options together or precede each with a hyphen, to use more than one option at a time.
#+begin_src shell
  ls -l -a -t
  # equals
  ls -alt
#+end_src

To tell a command to use a whole word as an option, you typically precede it with a double hyphen(--).
#+begin_src shell
  ls --help
#+end_src


Many commands also accept arguments after certain options are entered or at the end of the entire command line.
An argument is an extra piece of information, such as a filename, directory, username, device, or other item that tells the command what to act on.

Sometimes, an argument is associated with an option.
In that case, the argument must immediately follow the option.
With single-letter options, the argument typically follows after a space.
For full-word options, the argument often follows an equal sign(=).

#+begin_src shell
  ls --hide=Desktop
  # backup directory into backup.tar
  tar -cvf backup.tar directory
#+end_src

* Locating a Command

To find commands you type, the shell looks in what is referred to as your path.
#+begin_src shell
  echo $PATH
#+end_src
For commands that are not in your path, you can type the complete identity of the location of the command.


There are 3 command to locate your command
#+begin_src shell
  type                            # check in PATH
  locate                          # look at all filesystem
  which                           # silimar to type
#+end_src


* Connecting and Expanding Commands
A truly powerful feature of the shell is the capability to redirect the input and output fo commands to and from other commands and files.
To allow commands to be strung together, the shell uses metacharacters.
A metacharacter is a typed character that has special meaning to the shell for connecting commands or requesting expansion.

Metacharacters include the pipe character(|), ampersand(&), semicolon(;), right parenthesis()), left parenthesis((), less than sign(<), and greater than sign(>).


** Piping between commands
The pipe (|) metacharacter connects the output from one command to the input of another command.
#+BEGIN_SRC sh
cat /etc/passwd | sort | less
gunzip < /usr/share/man/man1/grep.1.gz  | nroff -c -man | less
#+END_SRC


** Sequential commands
Sometimes, you may want a sequence of commands to run, with one command completing before the next command begins.
#+BEGIN_SRC sh
date; stroff -me verlargedocument | lpr; date
...; mail -s "Finished the long cammand" chris@example.com
#+END_SRC

** Background commands
Sometimes, you may not want to tie up your shell waiting for command to finish.
In those cases, you can have the commands run in the background by using the ampersand(&).
#+BEGIN_SRC sh
troff -me verylargedocument | lpr & # Don't close the shell until the process is completed, or that kills the process.

#+END_SRC

** Expanding commands
With command substitution, you can have the output of a command interpreted by the shell instead of by the command itself.
The two forms of command substitution are $(command) and `command`.

#+BEGIN_SRC sh
vi $(find /home | grep zyzzy)

# The vi command opens all filename for editing (one at a time) that include xyzzy.
# This particular example is useful if you want to edit a file for which you know the name but not the location.
#+END_SRC


** Expanding arthmetic expressions
There are two form you can use to expand an arithmetic expression and pass it to the shell:
#+BEGIN_SRC sh
[expression]
(expression)
#+END_SRC

** Expanding variables
Variables that store information within the shell can be expanded using the dollar sign($) metacharacter.
#+BEGIN_SRC sh
echo $PATH
#+END_SRC

* Getting Information about Commands
- Check the PATH (directory command)
  #+begin_src shell
    echo $PATH
  #+end_src
- Use the help command (built-in command)
  #+begin_src shell
    help pwd
  #+end_src
- Use --help with the command (usage)
  #+begin_src shell
    ls --help
  #+end_src
- Use the info command (hierachy of nodes)
  #+begin_src shell
    info ls
  #+end_src
- Use the man command (description)
  #+begin_src shell
    man ls
  #+end_src


