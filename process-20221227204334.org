:PROPERTIES:
:ID:       4D6E5AB7-A138-41F4-B7E5-51BF16909619
:END:
#+title: Process

When a program on a modern system, the operating system provides the illusion that the progam is the only one running on the system.
The program appears to have exclusive use of both the processor, main memory, and I/O devices.
The processor appears to execute the instructions in the program, one after the other, without interruption.
And the code and data of the program appear to be the only objects in the system’s memory.
These illusions are provided by the notion of a process, one of the most important and successful ideas in computer science.

A *process* is the operating system’s abstraction for a running program.
Multiple processes can run concurrently on the same system, and each process appears to have exclusive use of the hardware.
By concurrently, we mean that the instructions of one process are interleaved with the instructions of another process.


A single CPU can appear to execute mulitple processes concurrently by having the processor switch among them.
The operating system performs this interleaving with a mechanism known as *context switching*.


The operating system keeps track of all the state information that the process needs in order to run.
This state, which is known as the context, includes information such as the current values of the PC, the register file, and the contents of main memory.
At any point in time, a uniprocessor system can only execute the code for a single process.
When the operating system decides to transfer control from the current process to some new process, it performs a context switch by saving the context of the current process, restoring the context of the new process, and the passing control to the new process.
The new process picks up exactly where it left off.


[[file:~/note/org-roam/images/process-context-switching.png]]



As the previous figure indicates, the transition from one process to another is managed by the operating system kernel.
The kernel is the portion of the operating system code that is always resident in memory.
When an application program requires some action by the operating system, such as to =read= or =write= a file, it executes a special system call instruction, transferring control to the kernel.
The kernel then performs the requested operation and returns back to the application program.
Note that the kernel is not a separate process.
Instead, it is a collection of code and data structures that the system uses to manage all the processes.


[[id:62DD78AD-9840-490D-A3CE-53101E042E88][Thread]]
[[id:C94043DC-F4F4-47CA-92FC-23FB8CA22FD9][Virtual Memory]]
