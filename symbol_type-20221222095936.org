:PROPERTIES:
:ID:       3039C7BD-04EF-4FCC-9F07-7BB54324E5F6
:END:
#+title: Symbol Type

A *symbol* in GNU Emacs Lisp is an object with a name. The symbol name
serves as the printed representation of the symbol. In ordinary Lisp
use, with one single obarray, a symbol's name is unique --no two symbols
have the same name.

A symbol can serve as a variable, as a function name, or to hold a
property list. Or it may serve only to be distinct from all other Lisp
objects, so that its presence in a data structure may be recognized
reliably. In a given context, usually only one of these uses is
intended. But you can use one symbol in all of these ways,
independently.

A symbol whose name starts with a colon (':') is called a keyword
symbol. These symbols automatically act as constants, and are normally
used only by comparing an unknown symbol with a few specific
alternatives.

A symbol name can contain any characters whatever. If a symbol name
looks like a number, you need to write a "\" at the beginning of the
name to force interpretation as a symbol. The characters
=-+=*/_~!@$%^&:<>{}?= requires no special punctuation. Any other
characters my be included in a symbol's name by escaping them with a
backslash. In contract to its use in string, a backslash in the name of
a symbol simply quotes the single character that follows the backslash.
For example, in a string, '\t' represents a tab character; in the name
of a symbol, however, '\t' merely quotes the letter 't'. To have a
symbol with a tab character in its name, you must actually use a tab
(preceded with a backslash). But it's rare to do such a thing.

#+begin_example
foo                                     ; A symbol named 'foo'
FOO                                     ; A symbol named 'FOO'
1+                                      ; A symbol named '1+'
\+1                                     ; A symbol named '+1'
+-*/_~!@$%^&=:<>{}                      ; A symbol named '+-*/_~!@$%^&=:<>{}'
#+end_example

As an exception to the rule that a symbol's name serves as its printed
representation, '##' is the printed representation for an interned
symbol whose name is an empty string. Furthermore, '#:foo' is the
printed representation for an uninterned symbol whose name is foo.


