:PROPERTIES:
:ID:       D15B6021-83F0-438F-BADD-4CEB3D4B63DF
:END:
#+title: Org Mode




[[id:1CA9CDDB-54FC-4D18-BAD6-FFA09945405F][Org-roam]]

Org is a mode for keeping notes, maintaining TODO lists, and project
planning with a fast and effective plain-text markup language. It also
is an authoring system with unique support for literate programming and
reproducible research.

Org is implemented on top of Outline mode.

Files with the '.org' extension use Org mode by default.


* Structure

Because Org is implemented to top of [[id:08AEE402-59AC-41E0-99DA-E7D43247693E][Outline Mode]], it supports the document structure functions similar to outline mode.
** Headlines

Headlines define the structure of an outline tree.
Org headlines start on the left margin with one or more stars followed by a space.

#+BEGIN_SRC
  * Top level headline
  ** Second level
  *** Third level
      some text
  *** Third level
      more text
  * Another top level headline
#+END_SRC

** Motion
Here are the motion commands can be used for headlines.

#+CAPTION: Motion commands
| *Binding*   | *Meaning*                           |
|-----------+-----------------------------------|
| *C-c C-n*   | Next heading                      |
| *C-c C-p*   | Previous heading                  |
| *C-c C-f*   | Next heading same level           |
| *C-c C-b*   | Previous heading same level       |
| *C-c C-u*   | Backward to higher level heading. |


** Visibility Cycling

Outlines make it possible to hide parts of the text in the buffer.
Org uses just two commands, bound to *TAB* and *S-TAB* to change the visibility in the buffer.

#+CAPTION: Visibility cycling commands
| **Binding** | *Meaning*                                                                                                           |
|-----------+-------------------------------------------------------------------------------------------------------------------|
| *TAB*       | Rotate current subtree among "fold - children - subtree". Point must be on a headline for this to work.           |
| *S-TAB*     | Rotate the entire buffer among "overview - content - show all"                                                    |
| *C-c C-r*   | Reveal context around point, showing the current entry, the following heading and the hierarchy above.            |
| *C-c C-k*   | Expose all the headings of the subtree, but not their bodies.                                                     |
| *C-c TAB*   | Expose all direct children of the subtree. With a numeric prefix argument N, expose all children down to level N. |
| *C-c C-x b* | Show the current subtree in an indirect buffer                                                                    |


** Structure Editing
#+CAPTION: Structure editing commands
| **Binding**           | *Meaning*                                                                                                                                                                                                                              |
|---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| *M-RET*               | Insert a new heading, item or row.                                                                                                                                                                                                   |
| *C-RET*               | Insert a new heading at the end of the current subtree.                                                                                                                                                                              |
| *M-S-RET*             | Insert new TODO entry with same level as current heading.                                                                                                                                                                            |
| *TAB*                 | In a new entry with no text yet, the first TAB demotes the entry to become a child of the previous one. The next TAB makes it a parent, and so on, all the way to top level. Yet another TAB, and you are back to the initial level. |
| *M-\(\leftarrow\)*    | Promote current heading by one level.                                                                                                                                                                                                |
| *M-\(\rightarrow\)*   | Demote current heading by one level                                                                                                                                                                                                  |
| *M-S-\(\leftarrow\)*  | Promote the current subtree by one level.                                                                                                                                                                                            |
| *M-S-\(\rightarrow\)* | Demote the current subtree by one level.                                                                                                                                                                                             |
| *M-\(\uparrow\)*      | Move subtree up, i.e., swap with previous subtree of same level.                                                                                                                                                                     |
| *M-\(\downarrow\)*    | Move subtree down, i.e., swap with next subtree of same level.                                                                                                                                                                       |
| *C-c @*               | Mark the subtree at point. Hitting repeatedly marks subsequent subtrees of the same level as the marked subtree.                                                                                                                     |
| *C-c C-x C-w*         | Kill subtree, i.e., remove it from buffer but save in kill ring. With a numeric prefix argument N, kill N sequential subtrees.                                                                                                       |
| *C-c C-x M-w*         | Copy subtree to kill ring. With a numeric prefix argument N, copy the N sequential subtrees.                                                                                                                                         |
| *C-c C-x C-y*         | Yank subtree from kill ring. This does modify the level of the subtree to make sure the tree fits in nicely at the yank position.                                                                                                    |
| *C-c C-w*             | Move the entry or entries at point to another heading.                                                                                                                                                                               |
| *C-c ^*               | Sort same-level entries. When there is an active region, all entries in the region are sorted. Otherwise the children of the current headline are sorted.                                                                            |
| *C-x n s*             | Narrow buffer to current subtree.                                                                                                                                                                                                    |
| *C-x n b*             | Narrow buffer to current block.                                                                                                                                                                                                      |
| *C-x n w*             | Widen buffer to remove narrowing.                                                                                                                                                                                                    |
| *C-c **               | Turn a normal line or plain list item into a headline---so that it becomes a subheading at its location.                                                                                                                             |


** Sparse Tree

An important feature of Org mode is the ability to construct *sparse
trees* for selected information in an outline tree, so that the entire
document is folded as much as possible, but the selected information is
made visible along with the headline structure above it.

#+CAPTION: Sparse tree commands
| **Binding**        | *Meaning*                                                               |
|--------------------+-------------------------------------------------------------------------|
| *C-c /*            | This prompts for an extra key to select a sparse-tree creating command. |
| *M-g n or M-g M-n* | Jump to the next sparse tree match in this buffer.                      |
| *M-g p or M-g M-p* | Jump to the previous sparse tree match in this buffer.                  |


** Drawers

Sometimes you want to keep information associated with an entry, but you normally do not want to see it.
For this, Org mode has *drawers*.
They can contain anything but a headline and another drawer.
Drawers look like this:

#+begin_src
  ** This is a headline
  Still outside the drawer
  :DRAWERNAME:
  This is inside the drawer.
  :END:
  After the drawer.
#+end_src

You can interactively insert a drawer at point by typing *C-c C-x d*.
With an active region, this command puts the region inside the drawer.
With a prefix argument, this command creates a 'PROPERTIES' drawer right below the current headline.
Org mode uses this special drawer for storing properties.
You cannot use it for anything else.

Visibility cycling on the headline hides and shows the entry, but keep the drawer collapsed to a single line.
In order to look inside the drawer, you need to move point to the drawer line and press *TAB* there.

** Block

Org mode uses *#+BEGIN ... #+END* blocks for various purposes from
including source code examples to capturing time logging information.
These blocks can be folded and unfolded by pressing TAB in the *#+BEGIN*
line.



* List

Org knows ordered lists, unordered lists, and description lists.

- Unordered list items start with *-, +* or *** as bullets.

- Ordered list items start with a numeral followed by either a period or
  a right parenthesis, such as *1.* or *1)*. If you want a list to start
  with a different value --- e.g., 10 --- start the text of the item
  with *[@10]*

- Description list items are unordered list items, and contain the
  separator *::* to distinguish the description term from the
  description.

The following commands act on items when point is in the first line of
an item---the line with the bullet or number. Some of them imply the
application of automatic rules to keep list structure intact. If some of
these actions get in your way, configure =org-list-automatic-rules= to
disable them individually.

#+CAPTION: Plain list commands
| **Binding**              | *Meaning*                                                                       |
|------------------------+-------------------------------------------------------------------------------|
| *TAB*                    | Items can be folded or unfolded                                               |
| *M-RET*                  | Insert new item at current level.                                             |
| *M-S-RET*                | Insert a new item with a checkbox                                             |
| *M-\(\uparrow\) or M-\(\downarrow\)*     | Move the item including subitems up/down.                                     |
| *M-\(\leftarrow\) or M-\(\rightarrow\)*     | Decrease/increase the indentation of an item, leaving children alone.         |
| *M-S-\(\leftarrow\) or M-S-\(\rightarrow\)* | Decrease/increase the indentation of the item, including subitems.            |
| *C-c C-c*                | If there is a checkbox in the item line, toggle the state of the checkbox.    |
| *C-c #*                  | Update the statistic cookie in the current outline entry.                     |
| *C-c -*                  | Cycle the entire list level through the different itemize/enumerate bullets . |
| *C-c **                  | Turn a plain list item into a headline.                                       |
| *C-c C-**                | Turn the whole plain list into a subtree of the current heading.              |
| *C-c ^*                  | Sort the plain list.                                                          |


** Checkboxes

Every item in a plain list can be made into a checkbox by starting it
with the string *[ ]*. This feature is similar to TODO items, but is
more lightweight. Checkboxes are not included into the global TODO list,
so they are often great to split a task into a number of simple steps.

#+BEGIN_SRC
  * light task [25%]
    - [-] task 1 [33%]
      - [X] task 1-1
      - [ ] task 1-2
      - [ ] task 1-3
    - [X] task 2
    - [ ] task 3
    - [ ] task 4
#+END_SRC

You can use *C-c C-c* to toggle the checkbox checked or not.
You can insert new list item with checkbox with the command *M-S-RET*.


* Table

** Built-in Table Editor

Org makes it easy to format tables in plain ASCII.
Any line with ‘|’ as the first non-whitespace character is considered part of a table.
‘|’ is also the column separator.
Moreover, a line starting with ‘|-’ is a horizontal rule.
It separates rows explicitly.
Rows before the first horizontal rule are header lines.

A table might look like this:
#+begin_src
| *Binding*   | *Meaning*                         |
|-------------+-----------------------------------|
| *C-c C-n*   | Next heading                      |
| *C-c C-p*   | Previous heading                  |
#+end_src




*** Create and Conversion
*C-c |* converts the active region to table.
If every line contains at least one TAB character, the function assumes that the material is tab separated.
If every line contains a comma, comma-separated values (CSV) are assumed.
If not, lines are split at whitespace into fields.
You can use a prefix argument to force a specific separator: C-u forces CSV, C-u C-u forces TAB, C-u C-u C-u prompts for a regular expression to match the separator, and a numeric argument N indicates that at least N consecutive spaces, or alternatively a TAB will be the separator.
If there is no active region, this command creates an empty Org table.

*** Re-aligning and Field Motion
- *C-c C-c* :: Re-align the table without moving point.
- *TAB* :: Re-align the table, move to the next field. Creates a new row if necessary.
- *S-TAB* :: Re-align, move to previous field.
- *RET* :: Re-align the table and move down to next row. Creates a new row if necessary.
- *M-a* :: Move to beginning of the current table field, or on to the previous field.
- *M-e* :: Move to end of the current table field, or on to the next field.



*** Column and Row Editing
- *M-\leftarrow* :: Move the current column left.
- *M\rightarrow* :: Move the current column right.
- *M-S-\leftarrow* :: Kill the current column.
- *M-S-\rightarrow* :: Insert a new column at point position. Move the recent column and all cells to the right of this column to the right.
- *M-\uparrow* :: Move the current row up.
- *M-\downarrow* :: Move the current row down.
- *M-S-\uparrow* :: Kill the current row or horizontal line.
- *M-S-\downarrow* :: Insert a new row above the current row. With a prefix argument, the line is created below the current one.
- *S-\uparrow* :: Move cell up by swapping with adjacent cell.
- *S-\downarrow* :: Move cell down by swapping with adjacent cell.
- *S-\leftarrow* :: Move cell left by swapping with adjacent cell.
- *S-\rightarrow* :: Move cell right by swapping with adjacent cell.
- *C-c -* :: Insert a horizontal line below current row. With a prefix argument, the line is created above the current line.
- *C-c RET* :: Insert a horizontal line below current row, and move point into the row below that line.
- *C-c ^* :: Sort the table lines in the region.
   The position of point indicates the column to be used for sorting, and the range of lines is the range between the nearest horizontal separator lines, or the entire table.
    If point is before the first column, you are prompted for the sorting column.
     If there is an active region, the mark specifies the first line and the sorting column, while point should be in the last line to be included into the sorting.
      The command prompts for the sorting type, alphabetically, numerically, or by time.
       You can sort in normal or reverse order.
        You can also supply your own key extraction and comparison functions.
         When called with a prefix argument, alphabetic sorting is case-sensitive.
- *C-c `* :: Edit the current field in a separate window.
   This is useful for fields that are not fully visible.
    When called with a C-u prefix, just make the full field visible, so that it can be edited in place.
     When called with C-u C-u prefixes, make the editor window follow point through the table and always show the current field.
      The follow mode exits automatically when point leaves the table, or when you repeat this command with C-u C-u C-c `.



*** Regions
- *C-c C-x M-w* :: Copy a rectangular region from a table to a special clipboard.
   Point and mark determine edge fields of the rectangle.
    If there is no active region, copy just the current field.
     The process ignores horizontal separator lines.
- *C-c C-x C-w* :: Copy a rectangular region from a table to a special clipboard, and blank all fields in the rectangle.
- *C-c C-x C-y* :: Paste a rectangular region into a table.
   The upper left corner ends up in the current field.
    All involved fields are overwritten.
     If the rectangle does not fit into the present table, the table is enlarged as needed.
      The process ignores horizontal separator lines.
- *M-RET* :: Split the current field at point position and move the rest to the line below.
   If there is an active region, and both point and mark are in the same column, the text in the column is wrapped to minimum width for the given number of lines.
    A numeric prefix argument may be used to change the number of desired lines.
     If there is no region, but you specify a prefix argument, the current field is made blank, and the content is appended to the field above.

*** Calculations
- *C-c +* :: Sum the numbers in the current column, or in the rectangle defined by the active region.
   The result is shown in the echo area and can be inserted with C-y.
- *S-RET* :: When current field is empty, copy from first non-empty field above.
   When not empty, copy current field down to next row and move point along with it.\\
Depending on the variable =org-table-copy-increment=, integer and time stamp field values, and fields prefixed or suffixed with a whole number, can be incremented during copy.
Also, a 0 prefix argument temporarily disables the increment.



     









* Hyperlinks
** Link Format
The general link format looks like this:

#+begin_src
[[LINK][DESCRIPTION]]
or alternatively
[[LINK]]
#+end_src

Once a link in the buffer is complete, with all brackets present, Org
changes the display so that *DESCRIPTION* is displayed instead of
*[[LINK][DESCRIPTION]]* and *LINK* is displayed instead of *[[LINK]]*.
You can directly edit the visible part of a link. This can be either the
LINK part, if there is no description, or the DESCRIPTION part
otherwise. To also edit the invisible LINK part, use *C-c C-l* with
point on the link.

** Internal Links

A link that does not look like a URL---i.e., does not start with a known
scheme or a file name---refers to the current document. You can follow
it with *C-c C-o* when point is on the link.

Org provides several refinements to internal navigation within a
document. Most notably, a construct like *=[[#my-custom-id]]=*
specifically targets the entry with the *CUSTOM_ID* property set to
*my-custom-id*. Also, an internal link looking like
*=[[*Some section]]=* points to a headline with the name *Some section*.

When the link does not belong to any of the cases above, Org looks for a
dedicated target: the same string in double angular brackets, like *<<My
Target>>*.

If no dedicated target exists, the link tries to match the exact name of
an element within the buffer.

Following a link pushes a mark onto Org's own mark ring. You can return
to the previous position with >C-c &. Using this command several times
in direct succession goes back to positions recorded earlier.

** External Links

External links are URL-like locators. They start with a short
identifying string followed by a colon. There can be no space after the
colon.

Here is the part set of built-in link types:

- file
  
  File links. File name may be remote, absolute, or relative.
  Additionally, you can specify a line number, or a text search. In Org
  files, you may link to a headline name, a custom ID, or a code
  reference instead. =file:/home/li/notebook/emacs/emacs.tex=.

- attachment
  
  Same as file links but for files and folders attached to the current
  node. Attachment links are intended to behave exactly as file links
  but for files relative to the attachment directory.
  =attachment:projects.org=.

- docview
  
  Link to a document opened with DocView mode. You may specify a page
  number.\\
  =docview:papers/last.pdf=.

- doi
  
  Link to an electronic resource, through its handle. =doi:10.1000/182=.

- elisp
  
  Execute an Elisp command upon activation.
  =elisp:(find-file "~/notebook")=.

- http
  
  =http://www.google.com=.

- https
  
  =https://www.google.com=.

- mailto
  
  Link to message composition. =mailto:mingmingli916@gmail.com=.

- shell
  
  Execute a shell command upon activation. =shell:date=.

** Handling Links

#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") #'org-store-link)
#+end_src

Org provides methods to create a link in the correct syntax, to insert
it into an Org file, and to follow the link. The main function is
=org-store-link= (*C-c l*)[fn:1]. It stores a link to the current
location. The link is stored for later insertion into an Org buffer. The
kind of link that is created depends on the current buffer:

- Org mode buffers
  
  For Org files, if there is a *<<target>>* at point, the link points to
  the target. Otherwise it points to the current headline. If the
  headline has a *CUSTOM_ID* property, store a link to this custom ID.

- Other files
  
  For any other file, the link points to the file, with a search string
  pointing to the contents of the current line. If there is an active
  region, the selected words form the basis of the search string.

- Agenda view
  
  The created link points to the entry referenced by the current line.

** Link Abbreviations

Long URL can be cumbersome to type, and often many similar links are
needed in a document. For this you can use link abbreviations. An
abbreviated link looks like this:

#+begin_src
[[linkword:tag][description]]
#+end_src

where the tag is optional. Abbreviations are resolved according to the
information in the variable =org-link-abbrev-alist= that relates the
linkwords to replacement text.

#+begin_src
(setq org-link-abbrev-alist
      '(("google" . "https://www.google.com")))
#+end_src

If the replacement text contains the string *%s*, it is replaced with
the tag. Using *%(my-function)* passes the tag to a custom Lisp
function, and replace it by the resulting string.

** Search Options in File Links

File links can contain additional information to make Emacs jump to a
particular location in the file when following a link. This can be a
line number or a search option after a double colon.

#+begin_src
[[file:~/code/main.c::255]]
[[file:~/xx.org::My Target]]
[[file:~/xx.org::*My Target]]
[[file:~/xx.org::#my-custom-id]]
[[file:~/xx.org::/regexp/]]
[[attachment:main.c::255]]
#+end_src

** Summary
:PROPERTIES:
:CUSTOM_ID: sec:summary-1
:END:

#+begin_src
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "M-n") #'org-next-link)
  (define-key org-mode-map (kbd "M-p") #'org-previous-link))
#+end_src

<<tab:hyperlinks-cmds>>
| **Binding** | *Meaning*                                                                                                                                              |
|-----------+------------------------------------------------------------------------------------------------------------------------------------------------------|
| *C-c C-l*   | Insert a link. With a *C-u* prefix, prompts for a file to link to. When point is on an existing link, edit the link and description parts of the link. |
| *C-c C-o*   | Open the link when point is on the link.                                                                                                             |
| *C-c %*     | Push the current position onto the Org mark ring, to be able to return easily.                                                                       |
| *C-c &*     | Following a link pushes a mark onto Org's own mark ring. You can return to the previous position with this command.                                  |
| *M-n*       | Move forward to the next link in the buffer.                                                                                                         |
| *M-p*       | Move backward to the previous link in the buffer.                                                                                                    |
#+caption: Hyperlinks command summary

* todo items

