:PROPERTIES:
:ID:       AC5D120C-7EE7-4F90-9782-6B48ECCCBEB3
:END:
#+title: List Types

A list can hold elements of any type, and its length can be easily
changed by adding or removing elements.


A *cons cell* is an object that consists of two slots, called the *car*
slot and the *cdr* slot. Each slot can hold any Lisp object.

A list is a series of cons cells, linked together so that the cdr slot
of each cons cell holds either the next cons cell or the empty list. The
empty list is actually the symbol nil. Because most cons cells are used
as part of lists, we refer to any structure made out of cons cells as a
*list structure*.

Because cons cells are so central to Lisp, we also have a word for an
object which is not a cons cell. These objects are called *atoms*.

The read syntax and printed representation for lists are identical, and
consist of a left parenthesis, an arbitrary number of elements, and a
right parenthesis.

#+begin_example
(A 2 "A")            ; A list of three elements.                      
()                   ; A list of no elements (the empty list).        
nil                  ; A list of no elements (the empty list).        
("A ()")             ; A list of one element: the string "A ()".      
(A ())               ; A list of two elements: A and the empty list.  
(A nil)              ; Equivalent to the previous.                    
((A B C))            ; A list of one element (which is a list of three elements).           
#+end_example

Upon reading, each object inside the parentheses becomes an element of
the list. That is, a cons cell is made for each element. The car slot of
the cons cell holds the element, and its cdr slot refers to the next
cons cell of the list, which holds the next element in the list. The cdr
slot of the last cons cell is set to hold =nil=.

The names car and cdr derive from the history of Lisp. The original Lisp
implementation ran on an IBM 704 computer which divided words into two
parts, the address and the decrement; car was an instruction to extract
the contents of the address part of a register, and cdr an instruction
to extract the contents of the decrement. By contrast, cons cells are
named for the function *cons* that creates them, which in turn was named
for its purpose, the construction of cells.

* Dotted Pair Notation

*Dotted pair notation* is a general syntax for cons cells that
represents the car and cdr explicitly. In this syntax, =(a . b)= stands
for a cons cell whose car is the object =a= and whose cdr is the object
=b=. It has the advantage that the cdr does not have to be a list.
However, it is more cumbersome in cases where list syntax would work. In
dotted pair notation, the list =(1 2 3)= is written as
=(1 . (2 . (3 . nil)))=. When printing a list, the dotted pair notation
is only used if the cdr of a cons cell is not a list.

* Association List Type

An *association list* or *alist* is a specially-constructed list whose
elements are cons cells. In each element, the car is considered a *key*,
and the cdr is considered an *associated value*.

#+begin_example
(setq alist-of-colors
      '((rose . red) (lily . white) (buttercup . yellow)))
#+end_example


